name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  workflows: write

jobs:
  build:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.3

      - name: Initialize Go module
        run: |
          go mod tidy
        working-directory: ./gitli

      - name: Build binary for Linux
        run: |
          mkdir -p ../dist
          GOOS=linux GOARCH=amd64 go build -o ../dist/ultimate-setup-linux-amd64
        working-directory: ./gitli

      - name: Verify binary
        run: |
          if [ ! -f dist/ultimate-setup-linux-amd64 ]; then
            echo "Binary not found!" && exit 1
          fi
          chmod +x dist/ultimate-setup-linux-amd64

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine next tag
        id: bump
        run: |
          latest=$(git tag --list 'v0.*' --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest"
          if [ -z "$latest" ]; then
            latest="v0.0.0"
          fi
          version=${latest#v}
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch+1))
          next="v${major}.${minor}.${patch}"
          echo "next=$next" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git tag ${{ steps.bump.outputs.next }}
          git push origin ${{ steps.bump.outputs.next }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.bump.outputs.next }}
          release_name: Release ${{ steps.bump.outputs.next }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test CLI features
        run: |
          chmod +x dist/ultimate-setup-linux-amd64
          echo "Testing --help command"
          ./dist/ultimate-setup-linux-amd64 --help | grep "Usage" || exit 1

          echo "Testing install command"
          ./dist/ultimate-setup-linux-amd64 install curl && which curl || exit 1

          echo "Testing uninstall command"
          ./dist/ultimate-setup-linux-amd64 uninstall curl && ! which curl || exit 1

          echo "Testing SSH key generation"
          ./dist/ultimate-setup-linux-amd64 generate-ssh-key test@example.com || exit 1

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ultimate-setup-linux-amd64
          asset_name: ultimate-setup-linux-amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-test:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.3

      - name: Initialize Go module
        run: |
          go mod tidy
        working-directory: ./gitli

      - name: Build binary for Linux
        run: |
          mkdir -p ../dist
          GOOS=linux GOARCH=amd64 go build -o ../dist/ultimate-setup-linux-amd64
        working-directory: ./gitli

      - name: Verify binary
        run: |
          if [ ! -f dist/ultimate-setup-linux-amd64 ]; then
            echo "Binary not found!" && exit 1
          fi
          chmod +x dist/ultimate-setup-linux-amd64

      - name: Test CLI features
        run: |
          chmod +x dist/ultimate-setup-linux-amd64
          echo "Testing --help command"
          ./dist/ultimate-setup-linux-amd64 --help | grep "Usage" || exit 1

          echo "Testing install command"
          ./dist/ultimate-setup-linux-amd64 install curl && which curl || exit 1

          echo "Testing uninstall command"
          ./dist/ultimate-setup-linux-amd64 uninstall curl && ! which curl || exit 1

          echo "Testing SSH key generation"
          ./dist/ultimate-setup-linux-amd64 generate-ssh-key test@example.com || exit 1
